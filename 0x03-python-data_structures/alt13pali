#include <stdio.h>
#include <stdlib.h>
#include "lists.h"

/**
 * is_palindrome - checks if a list is palindrome
 * @head: pointer to address of the head of the list
 * Return: 1 if palindrome or 0 if not
 */

int is_palindrome(listint_t **head)
{
	int i = 0, j, count = 0;
	listint_t *front, *rear, *current;

	if (*head == NULL)
		return (1);
	current = *head;
	while (current != NULL)
	{
		count++;
		current = current->next;
	}
	while (i != count / 2)
	{
		front = rear = *head;
		for (j = 0 ; j < i ; j++)
			front = front->next;
		for (j = 0 ; j < count - (i + 1) ; j++)
			rear = rear->next;
		if (front->n != rear->n)
			return (0);
		else
			i++;
	}
	return (1);
}

/* int is_palindrome(listint_t **head)
{
    listint_t *node = *head, *prev = NULL;
    int size = 0;

    if (node == NULL || node->next == NULL)
        return (1);

    while (node)
    {
        size++;
        node = node->next;
    }
    node = *head;

    for (int i = 0; i < size / 2; i++)
    {
        listint_t *next = node->next;
        node->next = prev;
        prev = node;
        node = next;
    }
    if (size % 2 == 1)
        node = node->next;

    while (node)
    {
        if (node->n != prev->n)
            return (0);
        node = node->next;
        prev = prev->next;
    }
    return (1);
}
 */